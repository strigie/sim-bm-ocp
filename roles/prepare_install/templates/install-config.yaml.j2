apiVersion: v1
baseDomain: {{ net.domain }}
compute:
- hyperthreading: Enabled
  name: worker
  replicas: 0
controlPlane:
  hyperthreading: Enabled
  name: control
  replicas: {{ groups['control'] | length }}
  platform:
    baremetal: {}
metadata:
  name: {{ openshift.name }}
networking:
  networkType: OVNKubernetes
  machineNetwork:
  - cidr: {{ libvirt.cidr4 }}
  - cidr: {{ libvirt.cidr6 }}
  clusterNetworks:
  - cidr: {{ net.cluster4_cidr }}
    hostPrefix: {{ net.cluster4_prefx }}
  - cidr: {{ net.cluster6_cidr }}
    hostPrefix: {{ net.cluster6_prefx }}
  serviceNetwork:
  - {{ net.service4 }}
  - {{ net.service6 }}
platform:
  baremetal:
    externalBridge: {{ libvirt.name }}
#    bootstrapProvisioningIP: {{ libvirt.cidr4 | ansible.netcommon.nthhost(20) }}
    provisioningNetwork: "Disabled"
    apiVIPs:
      - {{ libvirt.cidr4 | ansible.netcommon.nthhost(3) }}
      - {{ libvirt.cidr6 | ansible.netcommon.nthhost(3) }}
    ingressVIPs:
      - {{ libvirt.cidr4 | ansible.netcommon.nthhost(2) }}
      - {{ libvirt.cidr6 | ansible.netcommon.nthhost(2) }}
#    clusterOSImage: "http://[{{ libvirt.cidr4 | ansible.netcommon.nthhost(1) }}]:9080/{{ print_stream['architectures']['x86_64']['artifacts']['openstack']['formats']['qcow2.gz']['disk']['location'] | basename }}?sha256={{ print_stream['architectures']['x86_64']['artifacts']['openstack']['formats']['qcow2.gz']['disk']['uncompressed-sha256'] }}"
#    bootstrapOSImage: "http://[{{ libvirt.cidr4 | ansible.netcommon.nthhost(1) }}]:9080/{{ print_stream['architectures']['x86_64']['artifacts']['qemu']['formats']['qcow2.gz']['disk']['location'] | basename }}?sha256={{ print_stream['architectures']['x86_64']['artifacts']['qemu']['formats']['qcow2.gz']['disk']['uncompressed-sha256'] }}"
    hosts:
{% for c in groups['control'] %}
      - name: {{ c }}
        role: master
        bmc:
          address: redfish-virtualmedia://{{ libvirt.cidr4 | ansible.netcommon.nthhost(1) }}:8000/redfish/v1/Systems/{{ hostvars[c].uuid }}
          username: ADMIN
          password: ADMIN
          disableCertificateVerification: True
        bootMACAddress: {{ hostvars[c].spec.mac }}
        bootMode: "legacy"
        rootDeviceHints:
          deviceName: "/dev/vda"
{% endfor %}
#imageContentSources:
#  - mirrors:
#    - {{ ansible_host }}:5000/ocp4
#    - {{ ansible_host }}:5000/ocp4/release
#    source: quay.io/openshift-release-dev/ocp-release
#  - mirrors:
#    - {{ ansible_host }}:5000/ocp4
#    - {{ ansible_host }}:5000/ocp4/release
#    source: quay.io/openshift-release-dev/ocp-v4.0-art-dev
sshKey: '{{ key.sshkey }}'
#pullSecret: '{"auths":{"{{ ansible_host }}:5000":{"auth":"{{ (registry.user + ':' + registry.password) | b64encode }}"}}}'
pullSecret: '{{ key.pullsecret | to_json }}'
