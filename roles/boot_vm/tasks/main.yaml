- name: check if VM already exists
  virt:
    command: list_vms
  register: all_vms

# TODO: Make idempotent
- name: Destroy old VM
  shell: |
    virsh destroy {{ inventory_hostname }}
    virsh undefine --remove-all-storage {{ inventory_hostname }}
  when: "inventory_hostname in all_vms.list_vms"

# want fix: move to using the virt module...
- name: install VM
  shell: >-
    virt-install
    --name {{ inventory_hostname }}
    --hvm
    --virt-type kvm
    --arch x86_64
    --os-type linux
    --os-variant rhel8.0
    --network network={{ libvirt.name }},mac="{{ spec.mac }}"
    --vcpus {{ spec.cpu }}
    --ram {{ spec.ram }}
    --disk pool=default,size={{ spec.disk }},format=qcow2,cache={{ spec.disk_cache }}
    --disk pool=default,size={{ spec.disk2 }},format=qcow2,cache={{ spec.disk2_cache }}
    --check disk_size=off
    --nographics
    --noautoconsole
    --boot menu=on,useserial=on
  register: result
  retries: 3
  delay: 3
  until: result is not failed

- name: Get UUID
  command: virsh domuuid "{{ inventory_hostname }}"
  register: uuid

- set_fact:
    uuid: "{{ uuid.stdout }}"

#- debug: msg="{{ uuid }}" 
